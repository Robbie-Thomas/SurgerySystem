Index: SQL SCRIPTS/Patient.SQL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SQL SCRIPTS/Patient.SQL	(revision 76e65863f87c5a86b7dbe07b5d724f54dbf01270)
+++ SQL SCRIPTS/Patient.SQL	(revision a3581b9f273c802860db16a6cec520cc5aac9d54)
@@ -57,3 +57,10 @@
 ON UPDATE CASCADE ON DELETE RESTRICT,
 INDEX PatientID_Email (Patient_Id,Email_Address)
 ) ENGINE=INNODB;
+
+select p.First_Name, p.Last_Name,p.Date_Of_Birth, pE.Email_Address
+from patient p
+       left outer join patientemailaddress pE
+                       on p.Patient_Id = pE.Patient_Id
+where p.last_Name = "test"
+
Index: src/Patient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Patient.java	(revision 76e65863f87c5a86b7dbe07b5d724f54dbf01270)
+++ src/Patient.java	(revision a3581b9f273c802860db16a6cec520cc5aac9d54)
@@ -9,6 +9,25 @@
 import java.util.Objects;
 import java.util.Set;
 
+@NamedQueries(
+        value = {
+                @NamedQuery(
+                        name = "findPatientByFirstName",
+                        query = "from Patient p where p.firstName = :name"
+                ),
+                @NamedQuery(
+                        name = "findPatientByLastName",
+                        query = "from Patient p where p.lastName = :name"
+                ),
+                @NamedQuery(
+                        name = "findPatientByDOB",
+                        query = "from Patient p where  p.dob = :dob"
+                )
+
+        }
+)
+
+
 @Entity
 @Table(name = "patient")
 public class Patient {
Index: src/PatientEmailAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/PatientEmailAddress.java	(revision 76e65863f87c5a86b7dbe07b5d724f54dbf01270)
+++ src/PatientEmailAddress.java	(revision a3581b9f273c802860db16a6cec520cc5aac9d54)
@@ -7,6 +7,15 @@
 import java.util.Objects;
 
 
+@NamedQueries(
+        value = {
+                @NamedQuery(
+                        name = "findEmailByPatients",
+                        query = "select p as Patient from Patient p left outer join fetch PatientEmailAddress pe where pe.emailAddress = :email"
+                )
+        }
+)
+
 @Entity
 @Table(name = "patientEmailAddress")
 public class PatientEmailAddress {
Index: src/SessionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/SessionManager.java	(revision 76e65863f87c5a86b7dbe07b5d724f54dbf01270)
+++ src/SessionManager.java	(revision a3581b9f273c802860db16a6cec520cc5aac9d54)
@@ -3,9 +3,13 @@
 import org.hibernate.Transaction;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
+import org.hibernate.query.Query;
 
+import javax.persistence.TypedQuery;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.util.List;
+
 
 
 public class SessionManager {
@@ -17,21 +21,19 @@
 
         try {
             factory = new Configuration().configure().buildSessionFactory();
-        }
-        catch (Throwable ex)
-        {
+        } catch (Throwable ex) {
             System.err.println("Failed to create factory" + ex);
             throw new ExceptionInInitializerError(ex);
         }
 
         SessionManager sM = new SessionManager();
 
-       // sM.addPatient(LocalDate.now(),"John","Test","Health condition", true);
+        // sM.addPatient(LocalDate.now(),"John","Test","Health condition", true);
         //sM.updateFirstName(1,"Tom");
         //sM.addPatientAddress(1,"","55","Lane","Sheffield","S32 8GF","Sheffield","England");
         //sM.addPatientAddress(1,"","57"," Lane","Sheffield","S32 GHF","Sheffield","England");
         //sM.addPatientPhone("0777424242",1);
-        //sM.addPatientEmailAddress("dasdas@dasda.com",1);
+        //sM.addPatientEmailAddress("email2@dasda.com",1);
         //sM.addRoom("","5001");
         //sM.addStaffDoctor(1);
 
@@ -41,16 +43,18 @@
         //sM.addDoctor("Derick","Peppah","",true,true,true,true,true,true,true,true,true,true,true,false,false,false,false);
         //sM.addNurse("Sarah","Tilter","",false,true,true,true,true,true,true,true,true,true,true,false,false,false,false);
 
-    }
+        //List<Patient> patients = sM.getPatientsWithLastName("Test");
+        //System.out.println(patients.get(0).getFirstName());
+        List<Patient> patients = sM.getPatientsWithEmailAddress("dasdas@dasda.com");
+       System.out.println(patients.get(0).getFirstName());
 
-
+    }
 
 
     //creates a patient with all the fields
-    public void addPatient(LocalDate dob, String firstName, String lastName, String medicalInformation, boolean isMale)
-        {
-            Session session = factory.openSession();
-            Transaction tx = null;
+    public void addPatient(LocalDate dob, String firstName, String lastName, String medicalInformation, boolean isMale) {
+        Session session = factory.openSession();
+        Transaction tx = null;
 
 
         try {
@@ -58,32 +62,32 @@
             Patient patient = new Patient(dob, firstName, lastName, medicalInformation, isMale);
             session.save(patient);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx != null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
 
     }
 
-    public Patient getPatient(Integer patientId){
+    public Patient getPatient(Integer patientId) {
         Patient patient = new Patient();
         Session session = factory.openSession();
         Transaction tx = null;
         try {
             tx = session.beginTransaction();
-            patient = session.get(Patient.class,patientId);
+            patient = session.get(Patient.class, patientId);
             tx.commit();
-        }catch (HibernateException e){
+        } catch (HibernateException e) {
             e.printStackTrace();
         }
 
-        return session.get(Patient.class,patientId);
+        return session.get(Patient.class, patientId);
     }
 
 
     //deletes a patient with the equivalent Id as the PatientID
-    public void deletePatient(Integer patientId){
+    public void deletePatient(Integer patientId) {
         //creates the session
         Session session = factory.openSession();
         //Sets the transaction to null
@@ -101,14 +105,15 @@
         } catch (HibernateException e) {
             /*checks to see if the transaction is null, if the transaction tx is not
             it rolls back the transaction */
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        } session.close();
+        }
+        session.close();
     }
 
 
     //Updates a Patients first name
-    public void updateFirstName(Integer patientId, String firstName){
+    public void updateFirstName(Integer patientId, String firstName) {
         //creates the session
         Session session = factory.openSession();
         //Sets the transaction to null
@@ -124,17 +129,17 @@
             session.update(patient);
             //commits the transaction to the session
             tx.commit();
-        }catch (HibernateException e)
-        {
+        } catch (HibernateException e) {
             /*checks to see if the transaction is null, if the transaction tx is not
             it rolls back the transaction */
-            if(tx!= null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
 
     }
 
-       public void updateLastName(Integer patientId, String lastName){
+    public void updateLastName(Integer patientId, String lastName) {
         Session session = factory.openSession();
         Transaction tx = null;
 
@@ -144,15 +149,15 @@
             patient.setLastName(lastName);
             session.update(patient);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!= null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
 
     }
 
-    public void updateMiddleName(Integer patientId, String middleName){
+    public void updateMiddleName(Integer patientId, String middleName) {
         Session session = factory.openSession();
         Transaction tx = null;
 
@@ -162,32 +167,32 @@
             patient.setMiddleName(middleName);
             session.update(patient);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!= null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
 
     }
 
-    public void updateMedicalInformation(Integer patientId, String medicalInfo){
+    public void updateMedicalInformation(Integer patientId, String medicalInfo) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Patient patient = session.get(Patient.class, patientId);
             patient.setMedicalInformation(medicalInfo);
             session.update(patient);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateDateOfBirth(Integer patientId, LocalDate DOB){
+    public void updateDateOfBirth(Integer patientId, LocalDate DOB) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -196,14 +201,14 @@
             patient.setDob(DOB);
             session.update(patient);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
         }
         session.close();
     }
 
-    public void updateSex(Integer patientId, Boolean isMale){
+    public void updateSex(Integer patientId, Boolean isMale) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -212,8 +217,8 @@
             patient.setMale(isMale);
             session.update(patient);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
         }
         session.close();
@@ -221,7 +226,7 @@
 
     //Managing the patient address.
 
-    public void addPatientAddress(Integer patientId, String houseName, String houseNumber, String street, String city, String postcode, String county, String country){
+    public void addPatientAddress(Integer patientId, String houseName, String houseNumber, String street, String city, String postcode, String county, String country) {
         Session session = factory.openSession();
         Transaction tx = null;
 
@@ -229,18 +234,19 @@
         try {
             tx = session.beginTransaction();
             Patient patient = session.get(Patient.class, patientId);
-            Address address = new Address(patient, houseName , houseNumber, street, city, postcode, county, country);
+            Address address = new Address(patient, houseName, houseNumber, street, city, postcode, county, country);
             session.save(address);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
 
     //deletes a patient Address with the equivalent Id as the PatientID
-    public void deletePatientAddress(Integer PatientAddress_Id){
+    public void deletePatientAddress(Integer PatientAddress_Id) {
         //creates the session
         Session session = factory.openSession();
         //Sets the transaction to null
@@ -258,143 +264,136 @@
         } catch (HibernateException e) {
             /*checks to see if the transaction is null, if the transaction tx is not
             it rolls back the transaction */
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        } session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressHouseName(Integer PatientAddress_Id, String houseName)
-    {
+    public void updatePatientAddressHouseName(Integer PatientAddress_Id, String houseName) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setHouseName(houseName);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressHouseNumber(Integer PatientAddress_Id, String houseNumber)
-    {
+    public void updatePatientAddressHouseNumber(Integer PatientAddress_Id, String houseNumber) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setHouseNumber(houseNumber);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressStreet(Integer PatientAddress_Id, String street)
-    {
+    public void updatePatientAddressStreet(Integer PatientAddress_Id, String street) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setStreet(street);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressCity(Integer PatientAddress_Id, String city)
-    {
+    public void updatePatientAddressCity(Integer PatientAddress_Id, String city) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setCity(city);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressPostcode(Integer PatientAddress_Id, String postcode)
-    {
+    public void updatePatientAddressPostcode(Integer PatientAddress_Id, String postcode) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setPostcode(postcode);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
 
-    public void updatePatientAddressCounty(Integer PatientAddress_Id, String county)
-    {
+    public void updatePatientAddressCounty(Integer PatientAddress_Id, String county) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setCounty(county);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientAddressCountry(Integer PatientAddress_Id, String country)
-    {
+    public void updatePatientAddressCountry(Integer PatientAddress_Id, String country) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             Address address = session.get(Address.class, PatientAddress_Id);
             address.setCountry(country);
             session.update(address);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
 
     //Patient email Address
 
-    public void addPatientEmailAddress(String Email, Integer patientId)
-    {
+    public void addPatientEmailAddress(String Email, Integer patientId) {
         Session session = factory.openSession();
         Transaction tx = null;
 
@@ -406,13 +405,14 @@
             session.save(patientEmailAddress);
 
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void deletePatientEmailAddress(Integer PatientEmailAddress_Id){
+    public void deletePatientEmailAddress(Integer PatientEmailAddress_Id) {
         //creates the session
         Session session = factory.openSession();
         //Sets the transaction to null
@@ -430,55 +430,54 @@
         } catch (HibernateException e) {
             /*checks to see if the transaction is null, if the transaction tx is not
             it rolls back the transaction */
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
 
-        }session.close();
+        }
+        session.close();
         //closing the session
     }
 
 
-
-    public void updatePatientEmailAddress(Integer PatientEmailAddress_Id, String email)
-    {
+    public void updatePatientEmailAddress(Integer PatientEmailAddress_Id, String email) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             PatientEmailAddress patientEmailAddress = session.get(PatientEmailAddress.class, PatientEmailAddress_Id);
             patientEmailAddress.setEmailAddress(email);
             session.update(patientEmailAddress);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
     //Patient Phone number
 
 
-    public void addPatientPhone(String phoneNumber, Integer patient_Id)
-    {
+    public void addPatientPhone(String phoneNumber, Integer patient_Id) {
         Session session = factory.openSession();
         Transaction tx = null;
 
 
         try {
             tx = session.beginTransaction();
-            Patient patient = session.get(Patient.class,patient_Id);
+            Patient patient = session.get(Patient.class, patient_Id);
             PatientPhone patientPhone = new PatientPhone(phoneNumber, patient);
             session.save(patientPhone);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void deletePatientPhone(Integer patientPhone_Id){
+    public void deletePatientPhone(Integer patientPhone_Id) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -487,32 +486,32 @@
             session.delete(patientPhone);
             tx.commit();
         } catch (HibernateException e) {
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        } session.close();
+        }
+        session.close();
     }
 
-    public void updatePatientPhoneNumber(Integer patientPhone_Id, String phoneNumber)
-    {
+    public void updatePatientPhoneNumber(Integer patientPhone_Id, String phoneNumber) {
         Session session = factory.openSession();
         Transaction tx = null;
 
-        try{
+        try {
             tx = session.beginTransaction();
             PatientPhone patientPhone = session.get(PatientPhone.class, patientPhone_Id);
             patientPhone.setPhoneNumber(phoneNumber);
             session.update(patientPhone);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
     //Adding phone, email and address to the patient
 
-    public void addAddressToPatient(Integer patientId, Integer patientAddress_Id){
+    public void addAddressToPatient(Integer patientId, Integer patientAddress_Id) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -521,13 +520,14 @@
             Patient patient = session.load(Patient.class, patientId);
             patient.getAddresses().add(address);
             session.update(patient);
-        }catch (HibernateException e){
-            if(tx!= null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void addEmailAddressToPatient(Integer patientId, Integer patientEmailAddress_Id){
+    public void addEmailAddressToPatient(Integer patientId, Integer patientEmailAddress_Id) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -536,13 +536,14 @@
             Patient patient = session.load(Patient.class, patientId);
             patient.getPatientEmailAddresses().add(patientEmailAddress);
             session.update(patient);
-        }catch (HibernateException e){
-            if(tx!= null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void addPhoneToPatient(Integer patientId, Integer patientPhone_Id){
+    public void addPhoneToPatient(Integer patientId, Integer patientPhone_Id) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -551,19 +552,18 @@
             Patient patient = session.load(Patient.class, patientId);
             patient.getPatientPhones().add(patientPhone);
             session.update(patient);
-        }catch (HibernateException e){
-            if(tx!= null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
-
 
 
     //Doctor
 
 
-    public void addDoctor(String firstName, String lastName, String specialistArea, Boolean isMale, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM)
-    {
+    public void addDoctor(String firstName, String lastName, String specialistArea, Boolean isMale, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -572,13 +572,14 @@
             doctor = new Doctor(firstName, lastName, specialistArea, isMale, mondayAM, mondayPM, tuesdayAM, tuesdayPM, wednesdayAM, wednesdayPM, thursdayAM, thursdayPM, fridayAM, fridayPM, saturdayAM, saturdayPM, sundayAM, sundayPM);
             session.save(doctor);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void deleteDoctor(Integer docId){
+    public void deleteDoctor(Integer docId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -587,57 +588,61 @@
             session.delete(doctor);
             tx.commit();
         } catch (HibernateException e) {
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        } session.close();
+        }
+        session.close();
     }
 
-    public void updateDocFirstName(Integer docId, String firstName){
+    public void updateDocFirstName(Integer docId, String firstName) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Doctor doctor = session.get(Doctor.class, docId);
             doctor.setFirstName(firstName);
             session.update(doctor);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateDocLastName(Integer docId, String lastName){
+    public void updateDocLastName(Integer docId, String lastName) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Doctor doctor = session.get(Doctor.class, docId);
             doctor.setLastName(lastName);
             session.update(doctor);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateDocSpecialistArea(Integer docId, String specialistArea){
+    public void updateDocSpecialistArea(Integer docId, String specialistArea) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Doctor doctor = session.get(Doctor.class, docId);
             doctor.setSpecialistArea(specialistArea);
             session.update(doctor);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateDocIsMale(Integer docId, boolean isMale){
+    public void updateDocIsMale(Integer docId, boolean isMale) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -646,14 +651,15 @@
             doctor.setMale(isMale);
             session.update(doctor);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
     @SuppressWarnings("Duplicates")
-    public void updateDocSchedule(Integer docId, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM){
+    public void updateDocSchedule(Integer docId, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -675,17 +681,17 @@
             doctor.setSundayPM(sundayPM);
             session.update(doctor);
             tx.commit();
-            }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
 
     // Creating a nurse
 
 
-    public void addNurse(String firstName, String lastName, String specialistArea, Boolean isMale, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM)
-    {
+    public void addNurse(String firstName, String lastName, String specialistArea, Boolean isMale, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM) {
         Session session = factory.openSession();
         Transaction tx = null;
 
@@ -694,13 +700,14 @@
             Nurse nurse = new Nurse(firstName, lastName, specialistArea, isMale, mondayAM, mondayPM, tuesdayAM, tuesdayPM, wednesdayAM, wednesdayPM, thursdayAM, thursdayPM, fridayAM, fridayPM, saturdayAM, saturdayPM, sundayAM, sundayPM);
             session.save(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void deleteNurse(Integer nurseId){
+    public void deleteNurse(Integer nurseId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -709,59 +716,63 @@
             session.delete(nurse);
             tx.commit();
         } catch (HibernateException e) {
-            if (tx!=null) tx.rollback();
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        } session.close();
+        }
+        session.close();
     }
 
     @SuppressWarnings("Duplicates")
     //Need these methods even if shows as duplicate code.
-    public void updateNurseFirstName(Integer nurseId, String firstName){
+    public void updateNurseFirstName(Integer nurseId, String firstName) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Nurse nurse = session.get(Nurse.class, nurseId);
             nurse.setFirstName(firstName);
             session.update(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateNurseLastName(Integer nurseId, String lastName){
+    public void updateNurseLastName(Integer nurseId, String lastName) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Nurse nurse = session.get(Nurse.class, nurseId);
             nurse.setLastName(lastName);
             session.update(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateNurseSpecialistArea(Integer nurseId, String specialistArea){
+    public void updateNurseSpecialistArea(Integer nurseId, String specialistArea) {
         Session session = factory.openSession();
         Transaction tx = null;
-        try{
+        try {
             tx = session.beginTransaction();
             Nurse nurse = session.get(Nurse.class, nurseId);
             nurse.setSpecialistArea(specialistArea);
             session.update(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateNurseIsMale(Integer nurseId, boolean isMale){
+    public void updateNurseIsMale(Integer nurseId, boolean isMale) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -770,14 +781,15 @@
             nurse.setMale(isMale);
             session.update(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
     @SuppressWarnings("Duplicates")
-    public void updateNurseSchedule(Integer nurseId, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM){
+    public void updateNurseSchedule(Integer nurseId, Boolean mondayAM, Boolean mondayPM, Boolean tuesdayAM, Boolean tuesdayPM, Boolean wednesdayAM, Boolean wednesdayPM, Boolean thursdayAM, Boolean thursdayPM, Boolean fridayAM, Boolean fridayPM, Boolean saturdayAM, Boolean saturdayPM, Boolean sundayAM, Boolean sundayPM) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -799,15 +811,16 @@
             nurse.setSundayPM(sundayPM);
             session.update(nurse);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
 
     //Room
 
-    public void addRoom(String roomName, String roomNumber){
+    public void addRoom(String roomName, String roomNumber) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -815,13 +828,13 @@
             Room room = new Room(roomName, roomNumber);
             session.save(room);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
         }
-            session.close();
+        session.close();
     }
 
-    public void deleteRoom(Integer roomId){
+    public void deleteRoom(Integer roomId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -829,14 +842,14 @@
             Room room = session.get(Room.class, roomId);
             session.delete(room);
             tx.commit();
-        }catch (HibernateException e)
-        {
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
 
     }
 
-    public void UpdateRoomNumber(Integer roomId, String roomNumber){
+    public void UpdateRoomNumber(Integer roomId, String roomNumber) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -845,12 +858,13 @@
             room.setRoomNumber(roomNumber);
             session.update(room);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
-    public void UpdateRoomName(Integer roomId, String roomName){
+    public void UpdateRoomName(Integer roomId, String roomName) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -859,14 +873,15 @@
             room.setRoomName(roomName);
             session.update(room);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
     //staff
 
-    public void addStaffDoctor(Integer doctorId){
+    public void addStaffDoctor(Integer doctorId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -876,12 +891,13 @@
             staff.setDoctor(doctor);
             session.save(staff);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
-    public void addStaffNurse(Integer nurseId){
+    public void addStaffNurse(Integer nurseId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -891,25 +907,27 @@
             staff.setNurse(nurse);
             session.save(staff);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
-    public void deleteStaff(Integer staffId){
+    public void deleteStaff(Integer staffId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
             tx = session.beginTransaction();
             Staff staff = session.get(Staff.class, staffId);
             session.delete(staff);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateStaffDoc(Integer staffId, Integer doctorId){
+    public void updateStaffDoc(Integer staffId, Integer doctorId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -919,12 +937,13 @@
             staff.setDoctor(doctor);
             session.update(staff);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!= null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
-    public void updateStaffNurse(Integer staffId, Integer nurseId){
+    public void updateStaffNurse(Integer staffId, Integer nurseId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -934,14 +953,15 @@
             staff.setNurse(nurse);
             session.update(staff);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!= null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
     //Appointment
 
-    public void addAppointment(LocalDateTime appTime, LocalDateTime appDate, Integer patientId, Integer staffId, Integer roomId, boolean onTime){
+    public void addAppointment(LocalDateTime appTime, LocalDateTime appDate, Integer patientId, Integer staffId, Integer roomId, boolean onTime) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -949,28 +969,30 @@
             Patient patient = session.get(Patient.class, patientId);
             Staff staff = session.get(Staff.class, staffId);
             Room room = session.get(Room.class, roomId);
-            Appointment appointment = new Appointment(appDate,appTime,room,patient,staff,onTime);
+            Appointment appointment = new Appointment(appDate, appTime, room, patient, staff, onTime);
             session.save(appointment);
             tx.commit();
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
-        }session.close();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
+        }
+        session.close();
     }
 
-    public void deleteAppointment(Integer appId){
+    public void deleteAppointment(Integer appId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
             tx = session.beginTransaction();
             Appointment appointment = session.get(Appointment.class, appId);
             session.delete(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentDate(Integer appId, LocalDateTime date){
+    public void updateAppointmentDate(Integer appId, LocalDateTime date) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -978,13 +1000,14 @@
             Appointment appointment = session.get(Appointment.class, appId);
             appointment.setAppointmentDate(date);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentTime(Integer appId, LocalDateTime time){
+    public void updateAppointmentTime(Integer appId, LocalDateTime time) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -992,13 +1015,14 @@
             Appointment appointment = session.get(Appointment.class, appId);
             appointment.setAppointmentTime(time);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentStaff(Integer appId, Integer staffId){
+    public void updateAppointmentStaff(Integer appId, Integer staffId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -1007,13 +1031,14 @@
             Staff staff = session.get(Staff.class, staffId);
             appointment.setStaff(staff);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentPatient(Integer appId, Integer patientId){
+    public void updateAppointmentPatient(Integer appId, Integer patientId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -1022,28 +1047,30 @@
             Patient patient = session.get(Patient.class, patientId);
             appointment.setPatient(patient);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentRoom(Integer appId, Integer roomId){
+    public void updateAppointmentRoom(Integer appId, Integer roomId) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
             tx = session.beginTransaction();
             Appointment appointment = session.get(Appointment.class, appId);
-            Room room = session.get(Room.class,roomId);
+            Room room = session.get(Room.class, roomId);
             appointment.setRoom(room);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
     }
 
-    public void updateAppointmentOnTime(Integer appId, boolean onTime){
+    public void updateAppointmentOnTime(Integer appId, boolean onTime) {
         Session session = factory.openSession();
         Transaction tx = null;
         try {
@@ -1051,10 +1078,39 @@
             Appointment appointment = session.get(Appointment.class, appId);
             appointment.setOnTime(onTime);
             session.update(appointment);
-        }catch (HibernateException e){
-            if(tx!=null) tx.rollback();
+        } catch (HibernateException e) {
+            if (tx != null) tx.rollback();
             e.printStackTrace();
-        }session.close();
+        }
+        session.close();
+    }
+
+    public List<Patient> getPatientsWithLastName(String lastName) {
+        List<Patient> patients = null;
+        Session session = factory.openSession();
+        Transaction tx = null;
+        try {
+            tx = session.beginTransaction();
+            TypedQuery query = session.getNamedQuery("findPatientByLastName");
+            query.setParameter("name", lastName);
+            patients = query.getResultList();
+        } catch (HibernateException e) {
+            e.printStackTrace();
+        }return patients;
+    }
+
+    public List<Patient> getPatientsWithEmailAddress(String email) {
+        List<Patient> patients = null;
+        Session session = factory.openSession();
+        Transaction tx = null;
+        try {
+            tx = session.beginTransaction();
+            TypedQuery query = session.getNamedQuery("findPatientByEmail");
+            query.setParameter("email", email);
+            patients = query.getResultList();
+        } catch (HibernateException e) {
+            e.printStackTrace();
+        }return patients;
     }
 
 
@@ -1063,3 +1119,7 @@
 
 
 
+
+
+
+
